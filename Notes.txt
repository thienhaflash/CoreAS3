Note on Dispatcher : can not use only 1 EventObject ! there are case when something changes 
trigger changes of some other things in the same component (use the same dispatcher)
Copy props into a temp EventObject won't solve the problem.
Pooling might be an option to consider !

Create a supplemental independent functionalities for AS3 Flash

+	Queue(use nullized Array ?)
+	Task
+	Bindable Pair/State/Dynamic
+	ObjectInjector
+	Math utils (interpolate)
+	DrawingAPI (dashedline, ...)
+	VisualObject - Masked, LimitedStates
+	Optimizers	- Buffer, ObjectPool, Thread, ObjectCache

Loader syntax :

	loadURL(urlOrRequest : *, prioritize: Boolean = true, queue: String = null): LdItem

	SLoader	.add(urlOrRequest : *, prioritize: Boolean) ---> LdItem
			.preload(urlOrRequest: *, stopAt: Number)	---> LdItem
			
			.configVideo()		---> LdVideoItem
			.configAudio()		---> LdAudioItem
			.configGraphic()	---> LdGraphicItem
			.configData()		---> LdDataItem
			
			
	LdItem	.dispatcher	---> IDispatcher
			.queue		---> String
			.id			---> String
			.url		---> String
			.status		---> String
			
			.bytesLoaded	---> int
			.bytesTotal		---> int
			.percent		---> Number
			.content		---> *
			
	LdVideoItem		.stream			---> NetStream
					.connection		---> NetConnection
					.metaData		---> Object
					
					.wait4Meta		---> Boolean
					.attachVideo	---> Boolean
					.useNetStream	---> Boolean
					.bufferTime		---> int (-1 means pause forever)
	
	LdAudioItem		.sound
					.channel
					.bufferTime		---> int
					
	LdDataItem		.asXML			---> XML
					.asCSS			---> StyleSheet
				
	LdGraphicItem	.smoothBitmap	---> Boolean	
					
					.asBitmap		---> Bitmap
					.asMovie		---> MovieClip
					
				







































	load(url: String)	--> Loader item instance
			.useGroup(group, priority: int = 0)  --> LoaderGroup instance
			
			
		.getGroup(group=null) ---> 	Loader Group instance
			.priority //-1 for low, 0 for normal, 1 for max
			.stop()
			.pause()
			.start()
			.dispatcher //Group Event : ITEM_ADD / ITEM_REMOVE / ITEM_PROGRESS / QUEUE_PAUSE / QUEUE_RESUME
			
		.getAllGroup()
		
		
	loadURL(url: String, groupId: String = null) ---> Loader item instance
	Load.getItem(url: String)
		.onStart(function, params)
		.onComplete(function, params)
		.onProgress(function, params)
		.onError(function, params)
		.onEvent(function, params)		
		.onStop(function, params) 		---> canceled ? completed ? error ?
		.dispatcher 					---> Item Event : BEFORE START / AFTER START/ BEFORE STOP / AFTER STOP/ PROGRESS / ERROR / EVENT
		
		.group							---> group instance
		.stop()							--> will remove this url from the loading queue
		
		.eventVars						--> contains all the information about this item, ref to [video, audio, movie, bitmap, data] EventObject
		.videoVars				
		.audioVars
		.graphicVars
		.dataVars
		
		.configVideo
		.configAudio
		.configGraphic
		.configData
		
	Load.getGroup(groupId: String) ---> Loader Group instance
		.setPriorty() 	---> high, normal, low
		.stop()			---> stop the group loading (will remove all URL in this group)
		.pause()		---> pause loading
		.resume()		---> resume loading
		.onItemComplete ---> common handler for all URLs
		.onItemProgress
		.onItemError
		
		.onAllComplete
		.onAllProgress
		
		.dispatcher
		.